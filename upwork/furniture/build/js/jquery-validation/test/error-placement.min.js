module("placement"),test("elements() order",function(){var e=$("#orderContainer"),r=$("#elementsOrder").validate({errorLabelContainer:e,wrap:"li"});deepEqual(r.elements().map(function(){return $(this).attr("id")}).get(),["order1","order2","order3","order4","order5","order6"],"elements must be in document order"),r.form(),deepEqual(e.children().map(function(){return $(this).attr("id")}).get(),["order1-error","order2-error","order3-error","order4-error","order5-error","order6-error"],"labels in error container must be in document order")}),test("error containers, simple",function(){expect(14);var e=$("#simplecontainer"),r=$("#form").validate({errorLabelContainer:e,showErrors:function(){e.find("h3").html(jQuery.validator.format("There are {0} errors in your form.",this.size())),this.defaultShowErrors()}});r.prepareForm(),ok(r.valid(),"form is valid"),equal(e.find(".error:not(input)").length,0,"There should be no error labels"),equal(e.find("h3").html(),""),r.prepareForm(),r.errorList=[{message:"bar",element:{name:"foo"}},{message:"necessary",element:{name:"required"}}],ok(!r.valid(),"form is not valid after adding errors manually"),r.showErrors(),equal(e.find(".error:not(input)").length,2,"There should be two error labels"),ok(e.is(":visible"),"Check that the container is visible"),e.find(".error:not(input)").each(function(){ok($(this).is(":visible"),"Check that each label is visible")}),equal(e.find("h3").html(),"There are 2 errors in your form."),r.prepareForm(),ok(r.valid(),"form is valid after a reset"),r.showErrors(),equal(e.find(".error:not(input)").length,2,"There should still be two error labels"),ok(e.is(":hidden"),"Check that the container is hidden"),e.find(".error:not(input)").each(function(){ok($(this).is(":hidden"),"Check that each label is hidden")})}),test("error containers, with labelcontainer I",function(){expect(16);var e=$("#container"),r=$("#labelcontainer"),t=$("#form").validate({errorContainer:e,errorLabelContainer:r,wrapper:"li"});ok(t.valid(),"form is valid"),equal(e.find(".error:not(input)").length,0,"There should be no error labels in the container"),equal(r.find(".error:not(input)").length,0,"There should be no error labels in the labelcontainer"),equal(r.find("li").length,0,"There should be no lis labels in the labelcontainer"),t.errorList=[{message:"bar",element:{name:"foo"}},{name:"required",message:"necessary",element:{name:"required"}}],ok(!t.valid(),"form is not valid after adding errors manually"),t.showErrors(),equal(e.find(".error:not(input)").length,0,"There should be no error label in the container"),equal(r.find(".error:not(input)").length,2,"There should be two error labels in the labelcontainer"),equal(r.find("li").length,2,"There should be two error lis in the labelcontainer"),ok(e.is(":visible"),"Check that the container is visible"),ok(r.is(":visible"),"Check that the labelcontainer is visible"),r.find(".error:not(input)").each(function(){ok($(this).is(":visible"),"Check that each label is visible1"),equal($(this).parent()[0].tagName.toLowerCase(),"li","Check that each label is wrapped in an li"),ok($(this).parent("li").is(":visible"),"Check that each parent li is visible")})}),test("errorcontainer, show/hide only on submit",function(){expect(14);var e=$("#container"),r=$("#labelcontainer"),t=$("#testForm1").bind("invalid-form.validate",function(){ok(!0,"invalid-form event triggered called")}).validate({errorContainer:e,errorLabelContainer:r,showErrors:function(){e.html(jQuery.validator.format("There are {0} errors in your form.",this.numberOfInvalids())),ok(!0,"showErrors called"),this.defaultShowErrors()}});equal(e.html(),"","must be empty"),equal(r.html(),"","must be empty"),ok(!t.form(),"invalid form"),equal(r.find(".error:not(input)").length,2),equal(e.html(),"There are 2 errors in your form."),ok(r.is(":visible"),"must be visible"),ok(e.is(":visible"),"must be visible"),$("#firstname").val("hix").keyup(),$("#testForm1").triggerHandler("keyup",[jQuery.event.fix({type:"keyup",target:$("#firstname")[0]})]),equal(r.find(".error:visible").length,1),equal(e.html(),"There are 1 errors in your form."),$("#lastname").val("abc"),ok(t.form(),"Form now valid, trigger showErrors but not invalid-form")}),test("test label used as error container",function(e){expect(8);var r=$("#testForm16"),t=$("#testForm16text");r.validate({errorPlacement:function(e,r){$("label[for='"+r.attr("id")+"']").append(e)},errorElement:"span"}),ok(!t.valid()),equal(t.next("label").contents().first().text(),"Field Label","container label isn't disrupted"),e.hasError(t,"missing"),ok(!t.attr("aria-describedby"),"field does not require aria-describedby attribute"),t.val("foo"),ok(t.valid()),equal(t.next("label").contents().first().text(),"Field Label","container label isn't disrupted"),ok(!t.attr("aria-describedby"),"field does not require aria-describedby attribute"),e.noErrorFor(t)}),test("test error placed adjacent to descriptive label",function(e){expect(8);var r=$("#testForm16"),t=$("#testForm16text");r.validate({errorElement:"span"}),ok(!t.valid()),equal(r.find("label").length,1),equal(r.find("label").text(),"Field Label","container label isn't disrupted"),e.hasError(t,"missing"),t.val("foo"),ok(t.valid()),equal(r.find("label").length,1),equal(r.find("label").text(),"Field Label","container label isn't disrupted"),e.noErrorFor(t)}),test("test descriptive label used alongside error label",function(e){expect(8);var r=$("#testForm16"),t=$("#testForm16text");r.validate({errorElement:"label"}),ok(!t.valid()),equal(r.find("label.title").length,1),equal(r.find("label.title").text(),"Field Label","container label isn't disrupted"),e.hasError(t,"missing"),t.val("foo"),ok(t.valid()),equal(r.find("label.title").length,1),equal(r.find("label.title").text(),"Field Label","container label isn't disrupted"),e.noErrorFor(t)}),test("test custom errorElement",function(e){expect(4);var r=$("#userForm"),t=$("#username");r.validate({messages:{username:"missing"},errorElement:"label"}),ok(!t.valid()),e.hasError(t,"missing","Field should have error 'missing'"),t.val("foo"),ok(t.valid()),e.noErrorFor(t,"Field should not have a visible error")}),test("test existing label used as error element",function(e){expect(4);var r=$("#testForm14"),t=$("#testForm14text");r.validate({errorElement:"label"}),ok(!t.valid()),e.hasError(t,"required"),t.val("foo"),ok(t.valid()),e.noErrorFor(t)}),test("test existing non-label used as error element",function(e){expect(4);var r=$("#testForm15"),t=$("#testForm15text");r.validate({errorElement:"span"}),ok(!t.valid()),e.hasError(t,"required"),t.val("foo"),ok(t.valid()),e.noErrorFor(t)}),test("test aria-describedby with input names contains CSS-selector meta-characters",function(){var e=$("#testForm21"),r=$("#testForm21\\!\\#\\$\\%\\&\\'\\(\\)\\*\\+\\,\\.\\/\\:\\;\\<\\=\\>\\?\\@\\[\\\\\\]\\^\\`\\{\\|\\}\\~");equal(r.attr("aria-describedby"),void 0),e.validate({errorElement:"span",errorPlacement:function(){}}),ok(!r.valid()),equal(r.attr("aria-describedby"),"testForm21!#$%&'()*+,./:;<=>?@[\\]^`{|}~-error"),r.val("some"),r.trigger("keyup"),r.val("something"),r.trigger("keyup"),equal(r.attr("aria-describedby"),"testForm21!#$%&'()*+,./:;<=>?@[\\]^`{|}~-error","`aria-describedby` should remain the same as before."),r.val("something something"),r.trigger("keyup"),ok(r.valid()),equal(r.attr("aria-describedby"),"testForm21!#$%&'()*+,./:;<=>?@[\\]^`{|}~-error","`aria-describedby` should remain the same as before.")}),test("test existing non-error aria-describedby",function(e){expect(8);var r=$("#testForm17"),t=$("#testForm17text");equal(t.attr("aria-describedby"),"testForm17text-description"),r.validate({errorElement:"span"}),ok(!t.valid()),equal(t.attr("aria-describedby"),"testForm17text-description testForm17text-error"),e.hasError(t,"required"),t.val("foo"),ok(t.valid()),e.noErrorFor(t),strictEqual($("#testForm17text-description").text(),"This is where you enter your data"),strictEqual($("#testForm17text-error").text(),"","Error label is empty for valid field")}),test("test pre-assigned non-error aria-describedby",function(e){expect(7);var r=$("#testForm17"),t=$("#testForm17text");t.attr("aria-describedby","testForm17text-description testForm17text-error"),r.validate({errorElement:"span"}),ok(!t.valid()),equal(t.attr("aria-describedby"),"testForm17text-description testForm17text-error"),e.hasError(t,"required"),t.val("foo"),ok(t.valid()),e.noErrorFor(t),strictEqual($("#testForm17text-description").text(),"This is where you enter your data"),strictEqual($("#testForm17text-error").text(),"","Error label is empty for valid field")}),test("test id/name containing brackets",function(e){var r=$("#testForm18"),t=$("#testForm18\\[text\\]");r.validate({errorElement:"span"}),r.valid(),t.valid(),e.hasError(t,"required")}),test("test id/name containing $",function(e){var r=$("#testForm19"),t=$("#testForm19\\$text");r.validate({errorElement:"span"}),t.valid(),e.hasError(t,"required")}),test("test id/name containing single quotes",function(){var e=$("#testForm20").validate(),r=$("#testForm20\\[\\'textinput\\'\\]"),t=$("#testForm20\\[\\'checkboxinput\\'\\]"),i=$("#testForm20\\[\\'radioinput\\'\\]");e.form(),equal(e.numberOfInvalids(),3,"There is three invalid elements"),equal(e.invalidElements()[0],r[0],"The element should be invalid"),equal(e.invalidElements()[1],t[0],"The text element should be invalid"),equal(e.invalidElements()[2],i[0],"The text element should be invalid")}),test("#1632: Error hidden, but input error class not removed",function(){var e=$("#testForm23").validate({rules:{box1:{required:{depends:function(){return!!$("#box2").val()}}},box2:{required:{depends:function(){return!!$("#box1").val()}}}}}),r=$("#box1"),t=$("#box2");r.val("something"),e.form(),equal(e.numberOfInvalids(),1,"There is only one invlid element"),equal(e.invalidElements()[0],t[0],"The box2 element should be invalid"),r.val(""),e.form(),equal(e.numberOfInvalids(),0,"There is no error"),equal(t.hasClass("error"),!1,"Box2 should not have an error class")});